<?php
/*
+--------------------------------------------------------------------+
| CiviCRM version 4.7                                                |
+--------------------------------------------------------------------+
| Copyright CiviCRM LLC (c) 2004-2017                                |
+--------------------------------------------------------------------+
| This file is a part of CiviCRM.                                    |
|                                                                    |
| CiviCRM is free software; you can copy, modify, and distribute it  |
| under the terms of the GNU Affero General Public License           |
| Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
|                                                                    |
| CiviCRM is distributed in the hope that it will be useful, but     |
| WITHOUT ANY WARRANTY; without even the implied warranty of         |
| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
| See the GNU Affero General Public License for more details.        |
|                                                                    |
| You should have received a copy of the GNU Affero General Public   |
| License and the CiviCRM Licensing Exception along                  |
| with this program; if not, contact CiviCRM LLC                     |
| at info[AT]civicrm[DOT]org. If you have questions about the        |
| GNU Affero General Public License or the licensing of CiviCRM,     |
| see the CiviCRM license FAQ at http://civicrm.org/licensing        |
+--------------------------------------------------------------------+
*/
/**
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2017
 *
 * Generated from xml/schema/CRM/Apilogging/ApiloggingLog.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 * (GenCodeChecksum:a15867f026f8370e66f135203dea3dd0)
 */
require_once 'CRM/Core/DAO.php';
require_once 'CRM/Utils/Type.php';
/**
 * CRM_Apilogging_DAO_ApiloggingLog constructor.
 */
class CRM_Apilogging_DAO_ApiloggingLog extends CRM_Core_DAO {
  /**
   * Static instance to hold the table name.
   *
   * @var string
   */
  static $_tableName = 'civicrm_apilogginglog';
  /**
   * Should CiviCRM log any modifications to this table in the civicrm_log table.
   *
   * @var boolean
   */
  static $_log = false;
  /**
   * Unique ApiloggingLog ID
   *
   * @var int unsigned
   */
  public $id;
  /**
   *
   * @var datetime
   */
  public $time_stamp;
  /**
   * FK to the id of the contact who made the API call
   *
   * @var int unsigned
   */
  public $calling_contact_id;
  /**
   *
   * @var string
   */
  public $entity;
  /**
   *
   * @var string
   */
  public $action;
  /**
   *
   * @var text
   */
  public $parameters;
  /**
   * Class constructor.
   */
  function __construct() {
    $this->__table = 'civicrm_apilogginglog';
    parent::__construct();
  }
  /**
   * Returns foreign keys and entity references.
   *
   * @return array
   *   [CRM_Core_Reference_Interface]
   */
  static function getReferenceColumns() {
    if (!isset(Civi::$statics[__CLASS__]['links'])) {
      Civi::$statics[__CLASS__]['links'] = static ::createReferenceColumns(__CLASS__);
      Civi::$statics[__CLASS__]['links'][] = new CRM_Core_Reference_Basic(self::getTableName() , 'calling_contact_id', 'civicrm_contact', 'id');
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'links_callback', Civi::$statics[__CLASS__]['links']);
    }
    return Civi::$statics[__CLASS__]['links'];
  }
  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  static function &fields() {
    if (!isset(Civi::$statics[__CLASS__]['fields'])) {
      Civi::$statics[__CLASS__]['fields'] = array(
        'id' => array(
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'description' => 'Unique ApiloggingLog ID',
          'required' => true,
          'table_name' => 'civicrm_apilogginglog',
          'entity' => 'ApiloggingLog',
          'bao' => 'CRM_Apilogging_DAO_ApiloggingLog',
          'localizable' => 0,
        ) ,
        'time_stamp' => array(
          'name' => 'time_stamp',
          'type' => CRM_Utils_Type::T_DATE + CRM_Utils_Type::T_TIME,
          'title' => ts('Time stamp') ,
          'required' => true,
          'table_name' => 'civicrm_apilogginglog',
          'entity' => 'ApiloggingLog',
          'bao' => 'CRM_Apilogging_DAO_ApiloggingLog',
          'localizable' => 0,
        ) ,
        'calling_contact_id' => array(
          'name' => 'calling_contact_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Calling Contact') ,
          'description' => 'FK to the id of the contact who made the API call',
          'table_name' => 'civicrm_apilogginglog',
          'entity' => 'ApiloggingLog',
          'bao' => 'CRM_Apilogging_DAO_ApiloggingLog',
          'localizable' => 0,
          'FKClassName' => 'CRM_Contact_DAO_Contact',
        ) ,
        'entity' => array(
          'name' => 'entity',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Entity') ,
          'maxlength' => 100,
          'size' => CRM_Utils_Type::HUGE,
          'table_name' => 'civicrm_apilogginglog',
          'entity' => 'ApiloggingLog',
          'bao' => 'CRM_Apilogging_DAO_ApiloggingLog',
          'localizable' => 0,
        ) ,
        'action' => array(
          'name' => 'action',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Action') ,
          'maxlength' => 100,
          'size' => CRM_Utils_Type::HUGE,
          'table_name' => 'civicrm_apilogginglog',
          'entity' => 'ApiloggingLog',
          'bao' => 'CRM_Apilogging_DAO_ApiloggingLog',
          'localizable' => 0,
        ) ,
        'parameters' => array(
          'name' => 'parameters',
          'type' => CRM_Utils_Type::T_TEXT,
          'title' => ts('Parameters') ,
          'table_name' => 'civicrm_apilogginglog',
          'entity' => 'ApiloggingLog',
          'bao' => 'CRM_Apilogging_DAO_ApiloggingLog',
          'localizable' => 0,
        ) ,
      );
      CRM_Core_DAO_AllCoreTables::invoke(__CLASS__, 'fields_callback', Civi::$statics[__CLASS__]['fields']);
    }
    return Civi::$statics[__CLASS__]['fields'];
  }
  /**
   * Return a mapping from field-name to the corresponding key (as used in fields()).
   *
   * @return array
   *   Array(string $name => string $uniqueName).
   */
  static function &fieldKeys() {
    if (!isset(Civi::$statics[__CLASS__]['fieldKeys'])) {
      Civi::$statics[__CLASS__]['fieldKeys'] = array_flip(CRM_Utils_Array::collect('name', self::fields()));
    }
    return Civi::$statics[__CLASS__]['fieldKeys'];
  }
  /**
   * Returns the names of this table
   *
   * @return string
   */
  static function getTableName() {
    return self::$_tableName;
  }
  /**
   * Returns if this table needs to be logged
   *
   * @return boolean
   */
  function getLog() {
    return self::$_log;
  }
  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  static function &import($prefix = false) {
    $r = CRM_Core_DAO_AllCoreTables::getImports(__CLASS__, 'apilogginglog', $prefix, array());
    return $r;
  }
  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  static function &export($prefix = false) {
    $r = CRM_Core_DAO_AllCoreTables::getExports(__CLASS__, 'apilogginglog', $prefix, array());
    return $r;
  }
  /**
   * Returns the list of indices
   */
  public static function indices($localize = TRUE) {
    $indices = array();
    return ($localize && !empty($indices)) ? CRM_Core_DAO_AllCoreTables::multilingualize(__CLASS__, $indices) : $indices;
  }
}
